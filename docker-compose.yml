
services:
  db:
    image: postgres:15-alpine
    container_name: bailanysta-db
    environment:
      POSTGRES_DB: bailanysta
      POSTGRES_USER: bailanysta_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-bailanysta_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./api/internal/db/migrations:/migrations:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bailanysta_user -d bailanysta"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    env_file:
    - path: .env
    container_name: bailanysta-api
    environment:
      - DATABASE_URL=postgres://bailanysta_user:${DB_PASSWORD:-bailanysta_password}@db:5432/bailanysta?sslmode=disable
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - PORT=8080
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL:-}
      - MIGRATE_ON_START=true
      - CORS_ORIGIN=http://localhost:3000
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: bailanysta-web
    ports:
      - "3000:80"
    depends_on:
      - api
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  default:
    name: bailanysta-network
